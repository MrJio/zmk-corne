#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

&mt {
    tapping-term-ms = <600>;
    quick-tap-ms = <100>;
    hold-trigger-on-release;
    require-prior-idle-ms = <150>;
    flavor = "balanced";
};

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_EFF>, <&rgb_ug RGB_TOG>;
        };

        Long: Long {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            quick-tap-ms = <200>;
            tapping-term-ms = <800>;
            require-prior-idle-ms = <150>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    keymap {
        compatible = "zmk,keymap";

        Macbook {
            display-name = "MAC";
            bindings = <
&mt LC(C) ESC       &kp Q        &Long LG(W) W  &kp E           &Long LG(R) R       &Long LG(T) T                              &kp UP                            &kp Y  &kp U                   &kp I      &kp O        &kp P              &kp BSPC
&mt CLCK TAB        &mt LG(A) A  &kp S          &mt LG(D) D     &mt LG(F) F         &kp G                            &kp LEFT  &rgb_ug RGB_TOG  &kp RIGHT_ARROW  &kp H  &kp J                   &kp K      &mt LG(L) L  &kp SEMI           &kp SQT
&mt LGUI LS(LG(Z))  &mt LG(Z) Z  &mt LG(X) X    &mt LG(C) C     &mt LG(V) V         &mt LG(B) B    &kp LS(LG(N4))              &kp DOWN                          &kp N  &kp M                   &kp COMMA  &kp DOT      &mt LG(FSLH) FSLH  &to 3
                                                &mt PLUS EQUAL  &Long LSHIFT SPACE  &mo 2                                                                        &mo 1  &Long LEFT_SHIFT SPACE  &kp ENTER
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        Numbers {
            bindings = <
&kp ESC  &mt LG(N1) N1                    &mt LG(N2) N2                      &mt LG(N3) N3                     &mt LG(N4) N4                      &mt LG(N5) N5                                        &trans          &mt LG(N6) N6  &mt LG(N7) N7  &mt LG(N8) N8  &mt LG(N9) N9  &kp N0  &kp BSPC
&trans   &rgb_ug RGB_COLOR_HSB(0,100,50)  &rgb_ug RGB_COLOR_HSB(220,100,50)  &rgb_ug RGB_COLOR_HSB(112,84,46)  &rgb_ug RGB_COLOR_HSB(276,100,50)  &rgb_ug RGB_COLOR_HSB(305,100,50)            &trans  &trans  &trans  &trans         &trans         &trans         &trans         &trans  &trans
&trans   &trans                           &trans                             &trans                            &trans                             &trans                             &trans            &trans          &trans         &trans         &trans         &trans         &trans  &trans
                                                                             &trans                            &trans                             &trans                                                               &trans         &trans         &trans
            >;

            label = "NUM";
            sensor-bindings = <&inc_dec_kp LC(RIGHT) LC(LEFT)>;
        };

        Symbol {
            display-name = "ALT!";
            bindings = <
&kp ESC  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT                        &kp LG(A)                    &kp CARET  &kp LBRC           &kp RBRC           &kp AMPS  &trans         &kp BSPC
&trans   &trans    &trans  &trans    &trans    &trans               &bt BT_PRV  &rgb_ug RGB_EFF  &bt BT_NXT  &kp MINUS  &kp LPAR           &kp RPAR           &trans    &kp PIPE       &kp GRAVE
&trans   &trans    &trans  &trans    &trans    &trans     &trans                &kp LG(D)                    &kp UNDER  &mt LG(LBKT) LBKT  &mt LG(RBKT) RBKT  &trans    &kp BACKSLASH  &to 0
                           &to 1     &trans    &trans                                                        &kp MINUS  &kp UNDER          &kp ASTRK
            >;

            label = "ALT!";
        };

        Games {
            display-name = "Gaming";
            bindings = <
&kp ESC       &kp Q  &kp W  &kp E  &kp R  &kp T                       &trans          &trans  &trans  &trans  &trans  &trans  &trans
&mt CLCK TAB  &kp A  &kp S  &kp D  &kp F  &kp G               &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&tog 1        &kp Z  &kp X  &kp C  &kp V  &kp B      &to 0            &trans          &trans  &trans  &trans  &trans  &trans  &to 4
                            &kp E  &kp C  &kp SPACE                                   &trans  &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
            label = "GAMING";
        };

        Windows {
            display-name = "WIN";
            bindings = <
&mt LG(DOWN) ESC    &kp Q        &Long LC(W) W  &kp E           &Long LC(R) R       &Long LC(T) T                     &kp UP                            &kp Y  &kp U                   &kp I      &kp O        &kp P              &kp BSPC
&mt CLCK TAB        &mt LC(A) A  &kp S          &mt LC(D) D     &mt LC(F) F         &kp G                   &kp LEFT  &rgb_ug RGB_TOG  &kp RIGHT_ARROW  &kp H  &kp J                   &kp K      &mt LC(L) L  &kp SEMI           &kp SQT
&mt LGUI LS(LC(Z))  &mt LC(Z) Z  &mt LC(X) X    &mt LG(C) C     &mt LC(V) V         &mt LC(B) B    &to 0              &kp DOWN                          &kp N  &kp M                   &kp COMMA  &kp DOT      &mt LG(FSLH) FSLH  &to 3
                                                &mt PLUS EQUAL  &Long LSHIFT SPACE  &mo 2                                                               &mo 1  &Long LEFT_SHIFT SPACE  &kp ENTER
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };
    };
};
